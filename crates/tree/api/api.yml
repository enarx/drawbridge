openapi: 3.1.0

info:
  title: Tree store.
  description: |
    Tree store is a content-addressable store of arbitrary data.
  version: 0.1.0

paths:
  /{algo}:
    $ref: '#/components/pathItems/Algo'

  /{algo}/{hash}:
    $ref: '#/components/pathItems/AlgoHash'

  /{algo}/{hash}/{path}:
    $ref: '#/components/pathItems/AlgoHashPath'

components:
  schemas:
    ContentDigest:
      description: Node [content digest](https://www.ietf.org/archive/id/draft-ietf-httpbis-digest-headers-08.html#name-the-content-digest-field).
      type: string
      pattern: ^\*sha(224|256|384|512)=:[a-zA-Z0-9-_]{38,86}={0,2}:(\*,\*sha(224|256|384|512)=:[a-zA-Z0-9-_]{38,86}={0,2}:)*$
      example: 'sha-256=:4REjxQ4yrqUVicfSKYNO/cF9zNj5ANbzgDZt3/h3Qxo=:,\sha-512=:WZDPaVn/7XgHaAy8pmojAkGWoRx2UFChF41A2svX+TaPm+AbwAgBWnrI\iYllu7BNNyealdVLvRwEmTHWXvJwew==:'

    ContentLength:
      description: Node content length in bytes.
      type: integer
      format: int64
      example: 42

    ContentType:
      description: Node media type.
      type: string
      pattern: ^(application|audio|image|text)/[a-zA-Z0-9-_.,+]+$
      example: application/vnd.drawbridge.directory.v1+json

    Algorithm:
      description: Hashing algorithm.
      type: string
      enum:
        - sha224
        - sha256
        - sha384
        - sha512
      example: sha256

    Sha224Hash:
      description: '[Base64url-encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-5) sha224 hash without padding.'
      type: string
      contentEncoding: base64url
      minLength: 38
      maxLength: 38
      example: kKPtnjKyqvTGHEEOuSVCYRnhqdxT1Chq3pmoCQ

    Sha224HashArray:
      description: Lexicographically-sorted array of [base64url-encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-5) sha224 hashes without padding.
      type: array
      items: 
        $ref: '#/components/schemas/Sha224Hash'
      example:
        - 9kjs5aUQaWU2DYsDRtAHoC2xrWV0K9Kx12yrQg
        - kKPtnjKyqvTGHEEOuSVCYRnhqdxT1Chq3pmoCQ
        - Sjf8p5YG_Cztq94y8hBDNmR4E3onGvAnC6mnIA
        - TWB5M0GHGFXK7x-7i9c5gnlGgW8aiYu2zbZQ1g

    Sha256Hash:
      description: '[Base64url-encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-5) sha256 hash without padding.'
      type: string
      contentEncoding: base64url
      minLength: 43
      maxLength: 43
      example: n4bQgYhMfWWaL-qgxVrQFaO_TxsrC4Is0V1sFbDwCgg

    Sha256HashArray:
      description: Lexicographically-sorted array of [base64url-encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-5) sha256 hashes without padding.
      type: array
      items: 
        $ref: '#/components/schemas/Sha256Hash'
      example:
        - d3qAIZba0rsfTz6gFZGh8Csftm-Q9demapCAaSKKxrA
        - DodjLNRr1JB8UWMX622B_g-SGiPHZDAY8hKSiUtHBoE
        - M2B0gF_IU5h6vm9_462XpqbzB3oWOR_sdE9nGgFfvX4
        - n4bQgYhMfWWaL-qgxVrQFaO_TxsrC4Is0V1sFbDwCgg

    Sha384Hash:
      description: '[Base64url-encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-5) sha384 hash without padding.'
      type: string
      contentEncoding: base64url
      minLength: 64
      maxLength: 64
      example: doQSMg97CqWBL85CjcRwazyuUOAqZMqhangiSb_o78S37xzLEmJV0ZYEff7fF6Cp

    Sha384HashArray:
      description: Lexicographically-sorted array of [base64url-encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-5) sha384 hashes without padding.
      type: array
      items: 
        $ref: '#/components/schemas/Sha384Hash'
      example:
        - BUomZl8yH_XkL45xVapSJ4BTWBfJcf88G5VH4vD5Y9KHqrydY9XnC-UIaphOGPKe
        - doQSMg97CqWBL85CjcRwazyuUOAqZMqhangiSb_o78S37xzLEmJV0ZYEff7fF6Cp
        - lTC_jWbHlPbnRympcWa1Q5GHldaCgLmTcCFcWEub6vYtA5c2Y7zEKYa-Cu59XSL-
        - xY8o2G-xSfVJ6oVQrbmotLuy2Ew8v1oMAGuYy9TMl-qg4iunWCcsDOqk0AOZ5CQN

    Sha512Hash:
      description: '[Base64url-encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-5) sha512 hash without padding.'
      type: string
      contentEncoding: base64url
      minLength: 86
      maxLength: 86
      example: 7iaw3Ur350mqGo7jwQrpkj9hiYB3Lkc_iBml1JQODbJ6wYX4oOHV-E-IvIh_1nsUNzLDBMxfqa2Ob1f1ACio_w

    Sha512HashArray:
      description: Lexicographically-sorted array of [base64url-encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-5) sha512 hashes without padding.
      type: array
      items: 
        $ref: '#/components/schemas/Sha512Hash'
      example:
        - 1KfOYuLcjXYSRPhIJEo0eGbqFIIZr7aWR-uxuNthSFGefgogReCiSm6Qq4q1cIv3pMekkfSK_fZswo1TmPAYnw
        - 7iaw3Ur350mqGo7jwQrpkj9hiYB3Lkc_iBml1JQODbJ6wYX4oOHV-E-IvIh_1nsUNzLDBMxfqa2Ob1f1ACio_w
        - nTBG1bRQLCDFVFvqwDg11DsA8YEKVrsERJ-F3RTXMNDIKIje3DTdHuoxUOnj0C6Es946dpGTQSP6Pe0ZG4wTbA
        - TIeS2bPbVfZ3GQ7Pfe6tq0BesoJLN9vIYCcPJPKbE7aNVdUC6gTqouobMui3rZL6HFl-vNgyk0NEcmy-iMpkcQ

    FileContents:
      description: File contents.
      example: Hello world!

    Entry:
      description: An entry.
      type: object
      required:
        - hash
      properties:
        hash:
          oneOf:
            - $ref: '#/components/schemas/Sha224Hash'
            - $ref: '#/components/schemas/Sha256Hash'
            - $ref: '#/components/schemas/Sha384Hash'
            - $ref: '#/components/schemas/Sha512Hash'

    DirectoryContents:
      description: |
        Directory contents.

        Keys are node names.
      type: object
      propertyNames:
        pattern: ^[a-zA-Z0-9-_.,]+$
      additionalProperties:
        $ref: '#/components/schemas/Entry'
      example:
        assets:
          hash: DH01Tx3ixOrDYbNcjqw-H53EIFSI232hbotDTy1E_NU6+qodYhdrswrXoEfx_nnx
        Enarx.toml:
          hash: mqVuAfXRKap7bdgcCY5uykM6-R9GqQ8K_uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC
  
  headers:
    Content-Digest:
      required: true
      schema:
        $ref: '#/components/schemas/ContentDigest'

    Content-Length:
      required: true
      schema:
        $ref: '#/components/schemas/ContentLength'

    Content-Type:
      required: true
      schema:
        $ref: '#/components/schemas/ContentType'

  parameters:
    Content-Digest:
      name: Content-Digest
      required: true
      in: header
      schema:
        $ref: '#/components/schemas/ContentDigest'

    Content-Length:
      name: Content-Length
      in: header
      required: true
      schema:
        $ref: '#/components/schemas/ContentLength'

    Content-Type:
      name: Content-Type
      in: header
      required: true
      schema:
        $ref: '#/components/schemas/ContentType'

    Algorithm:
      name: algo
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Algorithm'

    NodeHash:
      name: hash
      in: path
      required: true
      schema:
        description: |
          Hash of node metadata, which is computed over JSON-encoded object with lexicographically-sorted keys
          with the following contents without whitespace characters:
          ```
          {
            "contentDigest": <object mapping digest algorithms to base64-encoded digest value strings>,
            "contentLength": <byte length of node contents>,
            "contentType": <media type of node contents>,
          }
          ```
        oneOf:
          - $ref: '#/components/schemas/Sha224Hash'
          - $ref: '#/components/schemas/Sha256Hash'
          - $ref: '#/components/schemas/Sha384Hash'
          - $ref: '#/components/schemas/Sha512Hash'

  pathItems:
    Algo:
      parameters:
        - $ref: '#/components/parameters/Algorithm'
      get:
        description: List available trees.
        responses:
          '200':
            description: Hashes of available tree root nodes
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/Sha224HashArray'
                    - $ref: '#/components/schemas/Sha256HashArray'
                    - $ref: '#/components/schemas/Sha384HashArray'
                    - $ref: '#/components/schemas/Sha512HashArray'

    AlgoHash:
      parameters:
        - $ref: '#/components/parameters/Algorithm'
        - $ref: '#/components/parameters/NodeHash'
      head:
        description: Check whether a tree exists.
        responses:
          '200':
            description: Tree exists
          '404':
            description: Tree does not exist
      get:
        description: Get tree contents.
        responses:
          '200':
            description: Tree contents
            headers:
              Content-Digest:
                $ref: '#/components/headers/Content-Digest'
              Content-Length:
                $ref: '#/components/headers/Content-Length'
              Content-Type:
                $ref: '#/components/headers/Content-Type'
            content:
              application/vnd.drawbridge.directory.v1+json:
                schema:
                  $ref: '#/components/schemas/DirectoryContents'
              '*/*':
                schema:
                  $ref: '#/components/schemas/FileContents'
          '404':
            description: Tree does not exist
      put:
        description: Upload tree contents.
        parameters:
          - $ref: '#/components/parameters/Content-Digest'
          - $ref: '#/components/parameters/Content-Length'
          - $ref: '#/components/parameters/Content-Type'
        requestBody:
          content:
            application/vnd.drawbridge.directory.v1+json:
              schema:
                $ref: '#/components/schemas/DirectoryContents'
            '*/*':
              schema:
                $ref: '#/components/schemas/FileContents'
        responses:
          '201':
            description: Tree uploaded
          '204':
            description: Tree already exists and matches uploaded contents
      delete:
        description: Yank a tree
        responses:
          '204':
            description: Tree yanked
          '404':
            description: Tree does not exist

    AlgoHashPath:
      parameters:
        - $ref: '#/components/parameters/Algorithm'
        - $ref: '#/components/parameters/NodeHash'
        - name: path
          in: path
          required: true
          schema:
            description: Slash-delimited path to a node within a tree consisting of consequent node hashes.
            type: string
            pattern: ^[a-zA-Z0-9-_]+(/[a-zA-Z0-9-_])+$
            example: d3qAIZba0rsfTz6gFZGh8Csftm-Q9demapCAaSKKxrA/M2B0gF_IU5h6vm9_462XpqbzB3oWOR_sdE9nGgFfvX4
      head:
        description: Check whether a tree path exists.
        responses:
          '200':
            description: Tree path exists
          '404':
            description: Tree or path within it does not exist
      get:
        description: Get tree path contents.
        responses:
          '200':
            description: Tree path contents
            headers:
              Content-Digest:
                $ref: '#/components/headers/Content-Digest'
              Content-Length:
                $ref: '#/components/headers/Content-Length'
              Content-Type:
                $ref: '#/components/headers/Content-Type'
            content:
              application/vnd.drawbridge.directory.v1+json:
                schema:
                  $ref: '#/components/schemas/DirectoryContents'
              '*/*':
                schema:
                  $ref: '#/components/schemas/FileContents'
          '404':
            description: Tree or path within it does not exist
      put:
        description: Upload tree path contents.
        parameters:
          - $ref: '#/components/parameters/Content-Digest'
          - $ref: '#/components/parameters/Content-Length'
          - $ref: '#/components/parameters/Content-Type'
        requestBody:
          content:
            application/vnd.drawbridge.directory.v1+json:
              schema:
                $ref: '#/components/schemas/DirectoryContents'
            '*/*':
              schema:
                $ref: '#/components/schemas/FileContents'
        responses:
          '201':
            description: Tree path uploaded
          '204':
            description: Tree path already exists and matches uploaded contents
          '404':
            description: Tree or path within it preceeding the node being uploaded does not exist
